generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id            String    @id @default(cuid()) @map("_id")
  styleCode     String    // Now required
  sku           String    @unique  // Now required and unique
  name          String
  description   String
  price         Float
  originalPrice Float?
  wholesalePrice Float?
  imageUrl      String
  category      String
  stock         Int      @default(0)
  color         String   // Now required
  material      String?
  mancode       String?
  productcost   Float
  productcharges Float
  exchangeRate  Float    @default(0)
  remarks       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  OrderItem     OrderItem[]
  version       Int      @default(0)
  additionalImages String[] @default([])
  wholesaleCo   String?   // Added
  producttype   String?   // Added
  display       String    @default("Yes")  // Added

  @@index([styleCode])
}

model Cart {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  items     CartItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id])
}

model Order {
  id              String          @id @default(cuid()) @map("_id")
  orderNumber     String          @unique
  status          String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  items           OrderItem[]
  shippingInfo    ShippingInfo    @relation(fields: [shippingInfoId], references: [id])
  shippingInfoId  String
  paymentIntentId String?
  subtotal        Float
  gst             Float
  pst             Float
  total           Float
  paymentMethod   String
  statusHistory   StatusHistory[]
  shippingCost    Float    @default(0)
}

model ShippingInfo {
  id         String  @id @default(cuid()) @map("_id")
  firstName  String
  lastName   String
  email      String
  address    String
  apartment  String?
  city       String
  province   String
  postalCode String
  phone      String
  country    String
  orders     Order[]
}

model OrderItem {
  id        String   @id @default(cuid()) @map("_id")
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StatusHistory {
  id        String      @id @default(cuid()) @map("_id")
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id])
  status    OrderStatus
  notes     String?
  timestamp DateTime    @default(now())
  createdAt DateTime    @default(now())
}

enum OrderStatus {
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Member {
  id            String    @id @default(cuid()) @map("_id")
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  address       String
  apartment     String?
  city          String
  province      String
  postalCode    String
  country       String
  phone         String
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  loginAttempts Int       @default(0)
  isLocked      Boolean   @default(false)
  lastLoginAttempt DateTime?
}

model VerificationToken {
  id        String   @id @default(cuid()) @map("_id")
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid()) @map("_id")
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
}

model ShippingRate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  minItems  Int
  maxItems  Int?
  cost      Float
  province  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReactivationToken {
  id        String   @id @default(cuid()) @map("_id")
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
}

model DiscountCode {
  id          String    @id @default(cuid()) @map("_id")
  code        String    @unique
  discount    Float     // Percentage discount (e.g., 10 for 10%)
  active      Boolean   @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Admin {
  id        String   @id @default(cuid()) @map("_id")
  username  String   @unique
  password  String   // Will store hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Visit {
  id        String   @id @default(cuid()) @map("_id")
  ip        String
  userAgent String?
  path      String
  timestamp DateTime @default(now())
}